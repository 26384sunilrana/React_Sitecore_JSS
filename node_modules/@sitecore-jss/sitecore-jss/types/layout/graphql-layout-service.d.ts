import { LayoutServiceBase } from './layout-service';
import { LayoutServiceData } from './models';
import { GraphQLClient } from '../graphql-request-client';
export declare type GraphQLLayoutServiceConfig = {
    /**
     * Your Graphql endpoint
     */
    endpoint: string;
    /**
     * The JSS application name
     */
    siteName: string;
    /**
     * The API key to use for authentication
     */
    apiKey: string;
    /**
     * Override default layout query
     * @param {string} siteName
     * @param {string} itemPath
     * @param {string} [locale]
     * @returns {string} custom layout query
     *
     * @default
     * Layout query
     * layout(site:"${siteName}", routePath:"${itemPath}", language:"${language}")
     */
    formatLayoutQuery?: (siteName: string, itemPath: string, locale?: string) => string;
};
export declare class GraphQLLayoutService extends LayoutServiceBase {
    serviceConfig: GraphQLLayoutServiceConfig;
    private graphQLClient;
    /**
     * Fetch layout data using the Sitecore GraphQL endpoint.
     * @param {GraphQLLayoutServiceConfig} serviceConfig
     */
    constructor(serviceConfig: GraphQLLayoutServiceConfig);
    /**
     * Fetch layout data for an item.
     * @param {string} itemPath
     * @param {string} [language]
     * @returns {Promise<LayoutServiceData>} layout service data
     */
    fetchLayoutData(itemPath: string, language?: string): Promise<LayoutServiceData>;
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    protected getGraphQLClient(): GraphQLClient;
    /**
     * Returns GraphQL Layout query
     * @param {string} itemPath page route
     * @param {string} [language] language
     */
    protected getLayoutQuery(itemPath: string, language?: string): string;
}
