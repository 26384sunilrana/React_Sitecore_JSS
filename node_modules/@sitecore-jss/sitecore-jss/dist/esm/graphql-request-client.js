var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { GraphQLClient as Client } from 'graphql-request';
import debuggers from './debug';
/**
 * A GraphQL client for Sitecore APIs that uses the 'graphql-request' library.
 * https://github.com/prisma-labs/graphql-request
 */
export class GraphQLRequestClient {
    /**
     * Provides ability to execute graphql query using given `endpoint`
     * @param {string} endpoint The Graphql endpoint
     * @param {GraphQLRequestClientConfig} [clientConfig] GraphQL request client configuration.
     */
    constructor(endpoint, clientConfig = {}) {
        this.endpoint = endpoint;
        this.headers = {};
        if (clientConfig.apiKey) {
            this.headers.sc_apikey = clientConfig.apiKey;
        }
        this.client = new Client(endpoint, { headers: this.headers });
        this.debug = clientConfig.debugger || debuggers.http;
    }
    /**
     * Execute graphql request
     * @param {string | DocumentNode} query graphql query
     * @param {Object} variables graphql variables
     */
    request(query, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                // Note we don't have access to raw request/response with graphql-request
                // (or nice hooks like we have with Axios), but we should log whatever we have.
                this.debug('request: %o', {
                    url: this.endpoint,
                    headers: this.headers,
                    query,
                    variables,
                });
                this.client
                    .request(query, variables)
                    .then((data) => {
                    this.debug('response: %o', data);
                    resolve(data);
                })
                    .catch((error) => {
                    this.debug('response error: %o', error.response);
                    return reject(error);
                });
            });
        });
    }
}
