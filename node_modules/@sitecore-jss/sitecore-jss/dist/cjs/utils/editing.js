"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetExperienceEditorChromes = exports.isExperienceEditorActive = exports.resetEditorChromes = exports.isEditorActive = exports.HorizonEditor = exports.ChromeRediscoveryGlobalFunctionName = exports.ExperienceEditor = void 0;
const is_server_1 = __importDefault(require("./is-server"));
/**
 * Static utility class for Sitecore Experience Editor
 */
class ExperienceEditor {
    static isActive() {
        if (is_server_1.default()) {
            return false;
        }
        // eslint-disable-next-line
        const sc = window.Sitecore;
        return Boolean(sc && sc.PageModes && sc.PageModes.ChromeManager);
    }
    static resetChromes() {
        if (is_server_1.default()) {
            return;
        }
        window.Sitecore.PageModes.ChromeManager.resetChromes();
    }
}
exports.ExperienceEditor = ExperienceEditor;
/**
 * Copy of chrome rediscovery contract from Horizon (chrome-rediscovery.contract.ts)
 */
exports.ChromeRediscoveryGlobalFunctionName = {
    name: 'Sitecore.Horizon.ResetChromes',
};
/**
 * Static utility class for Sitecore Horizon Editor
 */
class HorizonEditor {
    static isActive() {
        if (is_server_1.default()) {
            return false;
        }
        // Horizon will add "sc_horizon=editor" query string parameter for the editor and "sc_horizon=simulator" for the preview
        return window.location.search.indexOf('sc_horizon=editor') > -1;
    }
    static resetChromes() {
        if (is_server_1.default()) {
            return;
        }
        // Reset chromes in Horizon
        window[exports.ChromeRediscoveryGlobalFunctionName.name] &&
            window[exports.ChromeRediscoveryGlobalFunctionName.name]();
    }
}
exports.HorizonEditor = HorizonEditor;
/**
 * Determines whether the current execution context is within a Sitecore editor
 * @returns true if executing within a Sitecore editor
 */
const isEditorActive = () => {
    return ExperienceEditor.isActive() || HorizonEditor.isActive();
};
exports.isEditorActive = isEditorActive;
/**
 * Resets Sitecore editor "chromes"
 */
const resetEditorChromes = () => {
    if (ExperienceEditor.isActive()) {
        ExperienceEditor.resetChromes();
    }
    else if (HorizonEditor.isActive()) {
        HorizonEditor.resetChromes();
    }
};
exports.resetEditorChromes = resetEditorChromes;
/**
 * Determines whether the current execution context is within the Sitecore Experience Editor
 * @deprecated Will be removed in a future release. Please use isEditorActive instead.
 * @returns true if executing within the Sitecore Experience Editor
 */
exports.isExperienceEditorActive = exports.isEditorActive;
/**
 * Resets Sitecore Experience Editor "chromes"
 * @deprecated Will be removed in a future release. Please use resetEditorChromes instead.
 */
exports.resetExperienceEditorChromes = exports.resetEditorChromes;
