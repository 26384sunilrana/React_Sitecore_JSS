/* eslint-disable @typescript-eslint/no-explicit-any */
import React from 'react';
import PropTypes from 'prop-types';
import deepEqual from 'deep-equal';
export const SitecoreContextReactContext = React.createContext({});
export const ComponentFactoryReactContext = React.createContext({});
export class SitecoreContext extends React.Component {
    constructor(props) {
        super(props);
        this.setContext = (value) => {
            if (deepEqual(value, this.state.context))
                return;
            this.setState({
                context: value,
            });
        };
        let context = {
            pageEditing: false,
        };
        if (props.context) {
            context = props.context;
        }
        if (props.context === null) {
            context = null;
        }
        this.state = {
            context,
            setContext: this.setContext,
        };
    }
    componentDidUpdate(prevProps) {
        if (!deepEqual(prevProps.context, this.props.context)) {
            this.setState({
                context: this.props.context,
            });
            return;
        }
    }
    render() {
        return (React.createElement(ComponentFactoryReactContext.Provider, { value: this.props.componentFactory },
            React.createElement(SitecoreContextReactContext.Provider, { value: this.state }, this.props.children)));
    }
}
SitecoreContext.propTypes = {
    children: PropTypes.any.isRequired,
    componentFactory: PropTypes.func,
    context: PropTypes.any,
};
SitecoreContext.displayName = 'SitecoreContext';
