var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import PropTypes from 'prop-types';
export const DateField = (_a) => {
    var { field, tag, editable, render } = _a, otherProps = __rest(_a, ["field", "tag", "editable", "render"]);
    if (!field || (!field.editable && !field.value)) {
        return null;
    }
    let children;
    const htmlProps = Object.assign({}, otherProps);
    if (field.editable && editable) {
        htmlProps.dangerouslySetInnerHTML = {
            __html: field.editable,
        };
    }
    else if (render) {
        children = render(field.value ? new Date(field.value) : null);
    }
    else {
        children = field.value;
    }
    if (tag || (field.editable && editable)) {
        return React.createElement(tag || 'span', htmlProps, children);
    }
    else {
        return React.createElement(React.Fragment, null, children);
    }
};
DateField.propTypes = {
    field: PropTypes.shape({
        value: PropTypes.string,
        editable: PropTypes.string,
    }).isRequired,
    tag: PropTypes.string,
    editable: PropTypes.bool,
    render: PropTypes.func,
};
DateField.defaultProps = {
    editable: true,
};
DateField.displayName = 'Date';
